mybatis入门：
1.导入jar包
2.入门内容
	每个mybatis应用都是一个SqlsessionFactory实例为中心的。SqlSessionFactory的实例可以通过SqlSessionFactoryBuilder来获得，而SqlSessionFactoryBuilder则可以从
XML配置文件或者预先定制的Configuration的实例构建出SqlSessionFactory的实例。
	1.通过xml创建SqlSessionFactory：
		a.写mybatis配置文件，包含连接数据库的信息，事物，以及mappers
		b.写poMpper.xml文件，包含命名空间,sqlid，sql语句，入参映射以及，出参映射（实体类没有别名时要加实体类的全路径）
	    c.写连接代码，创建SqlSessionFactory, SqlSession(sqlSessionFactory.openSession()创建),执行SqlSession操作。关闭SqlSession。
	    
	2.不通过xmli创建SqlSessionFactory
		a.创建数据源对象
		DataSource dataSource = BlogDataSourceFactory.getBlogDataSource();
		b.创建事物工厂
		TransactionFactory transactionFactory = new JdbcTransactionFactory();
		c.创建环境对象
		Environment environment = new Environment("development", transactionFactory, dataSource);
		d.创建配置对象
		Configuration configuration = new Configuration(environment);
		e.添加映射
		configuration.addMapper(BlogMapper.class);
		f.创建sqlSessionFactory
		SqlSessionFactory sqlSessionFactory = new SqlSessionFactoryBuilder().build(configuration);
	
	3.mybatis使用SqlSession执行sql的3钟方式重要(1种使用Mpper.xml，1种使用Mapper+Mpper接口类，一种使用Mpper接口类)  超重要
		1.第一种Mapper.xml使用：
		 Person person = session.selectOne("com.ccol.mybatis.mapper.PersonMapper.selectPerson", 101);  //命名空间+sqlId，入参映射
		 这算使用的是session的自带方法，不注册Mapper类，这个命名空间+sqlId单纯用来找对应的sql语句，命名空间并不限定名字
		
		2.第二种Mapper.xml+Mapper类的使用:
		SqlSession session = sqlSessionFactory.openSession();
		PersonMapper personMapper = session.getMapper(PersonMapper.class);
		Person person = personMapper.selectPerson(101);
		
		这种使用Mapper接口来执行sql, 命名空间必须限定为Mapper接口类的包路径， sqlId必须要和Mapper接口类定义的方法名一致 
	    
	    3.第三种只使用Mapper接口类，要配合注解使用
	    public interface BlogMapper {
  			@Select("SELECT * FROM blog WHERE id = #{id}")
 			 Blog selectBlog(int id);
		}
        
        总结：前面两种mybatisconfimapper按照 <mapper resource="com/ccol/mybatis/demo01Mapper.xml"/> 用resource来映射配置文件及Mapper类
        		  后面这种<mapper class="com.ccol.mybatis.mapper.PersonMapper"/> 用class来映射Mapper类
        		  前面两种都可以用：
        		  <package name="com/cy/mybatis/mapper"/> 来替换，扫包来映射无论使用xml还是类映射都可以，
        		  很重要建议配置方式不要混用，Mapper映射错误导致代码报错
		
		
		
		二、XML映射配置文件
			1.properties 属性
			2.settings 设置 : 这是 MyBatis 中极为重要的调整设置，它们会改变 MyBatis 的运行时行为。下表描述了设置中各项的意图、默认值等。
			3.类型别名：typeAliase:
			    类型别名是为 Java 类型设置一个短的名字。它只和 XML 配置有关，存在的意义仅在于用来减少类完全限定名的冗余。例如:
				<typeAliases>
				  <typeAlias alias="Author" type="domain.blog.Author"/>
				  <typeAlias alias="Blog" type="domain.blog.Blog"/>
				  <typeAlias alias="Comment" type="domain.blog.Comment"/>
				  <typeAlias alias="Post" type="domain.blog.Post"/>
				  <typeAlias alias="Section" type="domain.blog.Section"/>
				  <typeAlias alias="Tag" type="domain.blog.Tag"/>
			   </typeAliases>
			当这样配置时，Blog可以用在任何使用domain.blog.Blog的地方。
			也可以指定一个包名，MyBatis 会在包名下面搜索需要的 Java Bean，比如:
			<typeAliases>
			  <package name="domain.blog"/>
			</typeAliases>
			每一个在包 domain.blog 中的 Java Bean，在没有注解的情况下，会使用 Bean 的首字母小写的非限定类名来作为它的别名。 比如 domain.blog.Author 的别名为 author；若有注解，则别名为其注解值。看下面的例子：

			@Alias("author")
			public class Author {
			    ...
			}
			
			4.typeHandlers 类型处理器:
			无论是 MyBatis 在预处理语句（PreparedStatement）中设置一个参数时，还是从结果集中取出一个值时， 都会用类型处理器将获取的值以合适的方式转换成 Java 类型。下表描述了一些默认的类型处理器。
			提示 从 3.4.5 开始，MyBatis 默认支持 JSR-310(日期和时间 API) 。
			你可以重写类型处理器或创建你自己的类型处理器来处理不支持的或非标准的类型。 
			具体做法为：实现 org.apache.ibatis.type.TypeHandler 接口， 或继承一个很便利的类 org.apache.ibatis.type.BaseTypeHandler.
			
			
	三、Mapper映射文件